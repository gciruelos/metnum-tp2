import numpy as np
from pylab import *

## CONVERGENCIA

def notredame_convergencia():
    c095 = [0.509119, 0.302075, 0.198991, 0.127336, 0.0839806, 0.0606219, 0.0480089, 0.0378658, 0.031487, 0.0265126, 0.0228915, 0.0200119, 0.017832, 0.0158883, 0.0143364, 0.0129636, 0.0117835, 0.0107435, 0.00985934, 0.00905446, 0.00834414, 0.00768855, 0.00709855, 0.00655922, 0.00607121, 0.00561827, 0.00520868, 0.00482965, 0.00448232, 0.00416337, 0.00387039, 0.00359784, 0.00334757, 0.00311561, 0.00290169, 0.00270469, 0.00252202, 0.0023519, 0.00219413, 0.00204755, 0.00191072, 0.00178394, 0.00166548, 0.00155537, 0.00145273, 0.00135734, 0.00126797, 0.00118527, 0.00110769, 0.00103561, 0.000968206, 0.000905496, 0.000846647, 0.000792107, 0.000740819, 0.000693202, 0.000648547, 0.000607005, 0.000567999, 0.000531821, 0.000497748, 0.000466116, 0.000436388, 0.000408719, 0.000382702, 0.000358579, 0.000335818, 0.000314701, 0.000294803, 0.000276305, 0.000258863, 0.000242689, 0.000227402, 0.000213219, 0.000199833, 0.000187395, 0.000175647, 0.000164752, 0.000154443, 0.000144884, 0.000135849, 0.000127466, 0.000119536, 0.000112184, 0.000105223, 9.87668e-05, 9.2656e-05, 8.69915e-05, 8.1627e-05, 7.66538e-05, 7.19399e-05, 6.75697e-05, 6.34274e-05, 5.95864e-05, 5.5946e-05, 5.25672e-05, 4.93619e-05, 4.63876e-05, 4.35651e-05, 4.09452e-05, 3.8459e-05, 3.61503e-05, 3.39592e-05, 3.19261e-05, 2.99974e-05, 2.82064e-05, 2.65064e-05, 2.49268e-05, 2.34275e-05, 2.20343e-05, 2.07117e-05, 1.94821e-05, 1.83147e-05, 1.72292e-05, 1.61987e-05, 1.52404e-05, 1.43305e-05, 1.3484e-05, 1.26804e-05, 1.19329e-05, 1.12231e-05, 1.0563e-05, 9.93633e-06]

    c085 = [0.455528, 0.241828, 0.142534, 0.0816079, 0.0481566, 0.0311029, 0.0220388, 0.0155528, 0.0115715, 0.00871778, 0.00673477, 0.00526785, 0.00419991, 0.0033482, 0.00270314, 0.00218701, 0.00177867, 0.00145098, 0.0011914, 0.000978969, 0.000807204, 0.00066549, 0.000549746, 0.000454506, 0.000376408, 0.00031166, 0.000258524, 0.000214479, 0.000178101, 0.000148015, 0.000123115, 0.000102398, 8.52463e-05, 7.09879e-05, 5.91544e-05, 4.93343e-05, 4.116e-05, 3.43432e-05, 2.86669e-05, 2.39358e-05, 1.9985e-05, 1.66949e-05, 1.39456e-05, 1.16528e-05, 9.73812e-06]

    c075 = [0.845058, 0.383317, 0.167387, 0.0759273, 0.0388375, 0.022154, 0.01362, 0.00866508, 0.00569545, 0.00387884, 0.00268285, 0.00187628, 0.00132599, 0.000945898, 0.000677615, 0.000488069, 0.000352605, 0.000255779, 0.00018595, 0.000135563, 9.90019e-05, 7.24555e-05, 5.30886e-05, 3.89666e-05, 2.86215e-05, 2.10614e-05, 1.55092e-05, 1.14378e-05, 8.4388e-06]

    c065 = [0.348345, 0.141415, 0.0637386, 0.0279068, 0.012593, 0.00621968, 0.00337016, 0.00181871, 0.00103476, 0.000596143, 0.000352177, 0.000210652, 0.00012843, 7.82948e-05, 4.83376e-05, 2.99063e-05, 1.85995e-05, 1.16027e-05, 7.28539e-06]




    fig = figure(figsize=(5,4))
    ax = fig.add_subplot(1,1,1)
    plot(range(len(c095)), c095, '+', label='c=0.95')
    plot(range(len(c085)), c085, 'x', label='c=0.85')
    plot(range(len(c075)), c075, '2', label='c=0.75',markersize=10)
    plot(range(len(c065)), c065, '1', label='c=0.65',markersize=10)
    ax.set_yscale('log')
    ax.legend(prop={'size':10})
    ylabel('Residuo de norma 1 (log)')
    xlabel('# de iteraciones')
    fig.tight_layout()
    ax.set_ylim([1e-5 - 5e-6,1.])
    ax.set_xlim([0, 180])




    fig.savefig('convergencia-notredame.png')



def stanford_convergencia():
    c095 = [1.07041, 0.61501, 0.340181, 0.195455, 0.126638, 0.0915012, 0.0712546, 0.0574211, 0.0478067, 0.0412406, 0.0361312, 0.032007, 0.0286517, 0.0258891, 0.0234919, 0.0214328, 0.0196132, 0.0180214, 0.0165951, 0.0153246, 0.014176, 0.0131414, 0.0121965, 0.0113394, 0.0105499, 0.00983351, 0.00917219, 0.00856819, 0.00800735, 0.00749151, 0.00700994, 0.00656568, 0.00615031, 0.00576676, 0.00540718, 0.00507454, 0.00476167, 0.00447197, 0.00419986, 0.00394735, 0.00370999, 0.00348973, 0.00328221, 0.0030897, 0.0029085, 0.00273951, 0.00257998, 0.00243115, 0.00229069, 0.00215964, 0.00203579, 0.00192002, 0.00181051, 0.00170829, 0.00161146, 0.00152099, 0.00143536, 0.00135536, 0.00127958, 0.00120874, 0.00114147, 0.00107852, 0.00101872, 0.000962724, 0.000909531, 0.000859708, 0.000812353, 0.000767978, 0.000725818, 0.000686278, 0.000648711, 0.000613468, 0.000579966, 0.00054853, 0.000518641, 0.000490598, 0.000463917, 0.000438898, 0.000415077, 0.000392737, 0.000371477, 0.000351533, 0.000332557, 0.000314745, 0.000297798, 0.000281881, 0.000266738, 0.000252507, 0.000238965, 0.00022624, 0.000214129, 0.000202751, 0.000191921, 0.000181754, 0.000172078, 0.00016298, 0.000154315, 0.000146165, 0.000138406, 0.000131105, 0.000124157, 0.000117616, 0.000111391, 0.00010553, 9.99516e-05, 9.46987e-05, 8.96981e-05, 8.49905e-05, 8.05075e-05, 7.62868e-05, 7.22676e-05, 6.84825e-05, 6.48792e-05, 6.14844e-05, 5.8253e-05, 5.52077e-05, 5.23095e-05, 4.95784e-05, 4.69807e-05, 4.45329e-05, 4.22027e-05, 4.00061e-05, 3.79146e-05, 3.59429e-05, 3.40652e-05, 3.2295e-05, 3.0609e-05, 2.9021e-05, 2.7507e-05, 2.60816e-05, 2.47218e-05, 2.34415e-05, 2.22203e-05, 2.10701e-05, 1.99731e-05, 1.89399e-05, 1.79543e-05, 1.70261e-05, 1.61406e-05, 1.53065e-05, 1.4511e-05, 1.37615e-05, 1.30466e-05, 1.23731e-05, 1.17306e-05, 1.11253e-05, 1.0548e-05, 1.0004e-05, 9.4852e-06]

    c085 = [0.957732, 0.492349, 0.243666, 0.125265, 0.0726172, 0.046946, 0.03271, 0.0235849, 0.017569, 0.0135606, 0.0106299, 0.00842537, 0.00674823, 0.00545571, 0.00442943, 0.00361579, 0.00296052, 0.0024339, 0.00200535, 0.0016569, 0.00137137, 0.00113747, 0.000944556, 0.000785736, 0.000654084, 0.00054549, 0.000455246, 0.000380503, 0.000318165, 0.000266335, 0.000222982, 0.000186866, 0.000156618, 0.000131393, 0.000110232, 9.25611e-05, 7.77117e-05, 6.53011e-05, 5.48722e-05, 4.61443e-05, 3.88044e-05, 3.26585e-05, 2.74831e-05, 2.31478e-05, 1.94966e-05, 1.64308e-05, 1.38451e-05, 1.16731e-05, 9.84097e-06]

    c075 = [0.845058, 0.383317, 0.167387, 0.0759273, 0.0388375, 0.022154, 0.01362, 0.00866508, 0.00569545, 0.00387884, 0.00268285, 0.00187628, 0.00132599, 0.000945898, 0.000677615, 0.000488069, 0.000352605, 0.000255779, 0.00018595, 0.000135563, 9.90019e-05, 7.24555e-05, 5.30886e-05, 3.89666e-05, 2.86215e-05, 2.10614e-05, 1.55092e-05, 1.14378e-05, 8.4388e-06]

    c065 = [0.732383, 0.287913, 0.108963, 0.0428358, 0.0189894, 0.00938783, 0.00500197, 0.00275797, 0.00157107, 0.000927304, 0.000555865, 0.000336916, 0.000206356, 0.000127577, 7.92072e-05, 4.94441e-05, 3.09581e-05, 1.94627e-05, 1.22627e-05, 7.7479e-06]


    fig = figure(figsize=(5,4))
    ax = fig.add_subplot(1,1,1)
    plot(range(len(c095)), c095, '+', label='c=0.95')
    plot(range(len(c085)), c085, 'x', label='c=0.85')
    plot(range(len(c075)), c075, '2', label='c=0.75',markersize=10)
    plot(range(len(c065)), c065, '1', label='c=0.65',markersize=10)
    ax.set_yscale('log')
    ax.legend(prop={'size':10})
    ylabel('Residuo de norma 1 (log)')
    xlabel('# de iteraciones')
    fig.tight_layout()
    ax.set_ylim([1e-5 - 5e-6,1.])
    ax.set_xlim([0, 180])




    fig.savefig('convergencia-stanford.png')

def google_convergencia():
    c095 = [0.950946, 0.430244, 0.229246, 0.138041, 0.0927083, 0.0692362, 0.0546829, 0.0452279, 0.0383282, 0.0331686, 0.0290564, 0.0257732, 0.0230028, 0.020697, 0.01871, 0.0170036, 0.0155061, 0.0142033, 0.013036, 0.0120089, 0.0110816, 0.0102533, 0.00950044, 0.00882514, 0.00820281, 0.00764011, 0.0071223, 0.0066491, 0.00621192, 0.00581239, 0.00543955, 0.00509694, 0.00477779, 0.00448197, 0.00420589, 0.00395042, 0.00371061, 0.00348813, 0.00328, 0.00308594, 0.00290403, 0.00273465, 0.00257515, 0.00242625, 0.00228635, 0.00215527, 0.00203193, 0.00191663, 0.00180793, 0.00170606, 0.00161024, 0.00152018, 0.00143525, 0.00135558, 0.00128033, 0.00120963, 0.00114299, 0.00108022, 0.00102091, 0.000965144, 0.000912426, 0.000862736, 0.000815813, 0.000771598, 0.000729746, 0.000690319, 0.00065303, 0.000617823, 0.000584549, 0.000553167, 0.000523451, 0.000495424, 0.000468907, 0.000443853, 0.000420154, 0.000397769, 0.000376564, 0.000356541, 0.000337584, 0.000319659, 0.000302696, 0.000286669, 0.000271481, 0.00025713, 0.000243539, 0.000230689, 0.000218516, 0.000207004, 0.0001961, 0.000185783, 0.000176009, 0.000166764, 0.000158003, 0.000149715, 0.000141862, 0.00013443, 0.000127386, 0.000120721, 0.000114404, 0.000108423, 0.000102756, 9.73905e-05, 9.23045e-05, 8.74897e-05, 8.29261e-05, 7.86042e-05, 7.45088e-05, 7.06305e-05, 6.69535e-05, 6.34721e-05, 6.01712e-05, 5.70443e-05, 5.40802e-05, 5.12728e-05, 4.86101e-05, 4.60887e-05, 4.36976e-05, 4.14325e-05, 3.92847e-05, 3.72503e-05, 3.53206e-05, 3.34931e-05, 3.17595e-05, 3.01174e-05, 2.85596e-05, 2.70841e-05, 2.56843e-05, 2.43583e-05, 2.31001e-05, 2.19082e-05, 2.07773e-05, 1.97059e-05, 1.86892e-05, 1.7726e-05, 1.68119e-05, 1.5946e-05, 1.51242e-05, 1.43456e-05, 1.36066e-05, 1.29065e-05, 1.2242e-05, 1.16124e-05, 1.10148e-05, 1.04486e-05, 9.91122e-06, 9.40203e-06, 8.91871e-06, 8.46072e-06, 8.026e-06, 7.61405e-06, 7.223e-06, 6.85243e-06, 6.50064e-06, 6.16726e-06, 5.85079e-06, 5.55085e-06, 5.26612e-06, 4.99626e-06, 4.74008e-06, 4.49727e-06, 4.26677e-06, 4.04828e-06, 3.84087e-06, 3.64426e-06, 3.45762e-06, 3.2807e-06, 3.11274e-06, 2.95351e-06, 2.80234e-06, 2.65904e-06, 2.523e-06, 2.39402e-06, 2.27158e-06, 2.15549e-06, 2.04529e-06, 1.9408e-06, 1.8416e-06, 1.74754e-06, 1.65825e-06, 1.57358e-06, 1.49321e-06, 1.41697e-06, 1.34462e-06, 1.276e-06, 1.21086e-06, 1.14908e-06, 1.09044e-06, 1.03482e-06, 9.82026e-07]



    c085 = [0.850847, 0.344434, 0.164206, 0.0884687, 0.0531613, 0.0355226, 0.0251026, 0.0185767, 0.0140856, 0.0109064, 0.0085485, 0.00678442, 0.00541776, 0.00436156, 0.00352779, 0.00286858, 0.00234058, 0.00191825, 0.00157527, 0.0012984, 0.00107202, 0.000887485, 0.00073576, 0.000611518, 0.000508564, 0.000423817, 0.000353504, 0.000295279, 0.000246826, 0.00020664, 0.000173029, 0.000145064, 0.000121667, 0.00010212, 8.57421e-05, 7.20568e-05, 6.0558e-05, 5.09348e-05, 4.28539e-05, 3.60745e-05, 3.03746e-05, 2.55921e-05, 2.15626e-05, 1.81773e-05, 1.53261e-05, 1.29267e-05, 1.09041e-05, 9.20268e-06, 7.76699e-06, 6.55785e-06, 5.538e-06, 4.67789e-06, 3.95167e-06, 3.33943e-06, 2.82204e-06, 2.38556e-06, 2.01686e-06, 1.70546e-06, 1.44215e-06, 1.21986e-06, 1.03184e-06, 8.72946e-07]


    c075 = [0.750747, 0.268158, 0.112802, 0.053624, 0.028432, 0.0167633, 0.0104524, 0.00682508, 0.00456622, 0.00311963, 0.00215752, 0.00151085, 0.00106456, 0.000756197, 0.000539682, 0.000387208, 0.000278768, 0.000201589, 0.00014607, 0.000106232, 7.73913e-05, 5.65318e-05, 4.13533e-05, 3.03267e-05, 2.22538e-05, 1.63636e-05, 1.20431e-05, 8.876e-06, 6.54663e-06, 4.83598e-06, 3.57298e-06, 2.64311e-06, 1.956e-06, 1.44861e-06, 1.07319e-06, 7.95788e-07]


    c065 = [0.650647, 0.201416, 0.0734297, 0.0302529, 0.0139017, 0.00710349, 0.00383866, 0.00217232, 0.00125958, 0.000745803, 0.000447022, 0.000271298, 0.000165671, 0.000101992, 6.3084e-05, 3.92263e-05, 2.44753e-05, 1.53393e-05, 9.63275e-06, 6.07153e-06, 3.83341e-06, 2.42683e-06, 1.53854e-06, 9.77854e-07]


    fig = figure(figsize=(5,4))
    ax = fig.add_subplot(1,1,1)
    plot(range(len(c095)), c095, '+', label='c=0.95')
    plot(range(len(c085)), c085, 'x', label='c=0.85')
    plot(range(len(c075)), c075, '2', label='c=0.75',markersize=10)
    plot(range(len(c065)), c065, '1', label='c=0.65',markersize=10)
    ax.set_yscale('log')
    ax.legend(prop={'size':10})
    ylabel('Residuo de norma 1 (log)')
    xlabel('# de iteraciones')
    fig.tight_layout()
    ax.set_ylim([1e-5 - 5e-6,1.])
    ax.set_xlim([0, 180])



    fig.savefig('convergencia-google.png')



def dist_convergencia():
    l1 = [0.957732, 0.492349, 0.243666, 0.125265, 0.0726172, 0.046946, 0.03271, 0.0235849, 0.017569, 0.0135606, 0.0106299, 0.00842537, 0.00674823, 0.00545571, 0.00442943, 0.00361579, 0.00296052, 0.0024339, 0.00200535, 0.0016569, 0.00137137, 0.00113747, 0.000944556, 0.000785736, 0.000654084, 0.00054549, 0.000455246, 0.000380503, 0.000318165, 0.000266335, 0.000222982, 0.000186866, 0.000156618, 0.000131393, 0.000110232, 9.25611e-05, 7.77117e-05, 6.53011e-05, 5.48722e-05, 4.61443e-05, 3.88044e-05, 3.26585e-05, 2.74831e-05, 2.31478e-05, 1.94966e-05, 1.64308e-05, 1.38451e-05, 1.16731e-05, 9.84097e-06]

    l2 = [0.0372056, 0.0195437, 0.00670372, 0.00320866, 0.00202636, 0.00102888, 0.000713123, 0.000507959, 0.000402283, 0.000323476, 0.000262765, 0.00021168, 0.00017979, 0.000146186, 0.00012386, 0.000101426, 8.65558e-05, 7.09505e-05, 6.07294e-05, 4.99475e-05, 4.28346e-05, 3.52874e-05, 3.03365e-05, 2.50231e-05, 2.15369e-05, 1.78027e-05, 1.53333e-05, 1.26862e-05, 1.09423e-05, 9.06001e-06]

    linf = [0.0222338, 0.0112516, 0.00273869, 0.00170189, 0.00127068, 0.000411258, 0.000233112, 0.000197863, 0.000168399, 0.000142958, 0.000121662, 0.000103291, 8.78969e-05, 7.46307e-05, 6.35035e-05, 5.39221e-05, 4.58802e-05, 3.89598e-05, 3.31477e-05, 2.81495e-05, 2.39487e-05, 2.03385e-05, 1.73027e-05, 1.46948e-05, 1.2501e-05, 1.06173e-05, 9.03191e-06]


    fig = figure(figsize=(5,4))
    ax = fig.add_subplot(1,1,1)
    plot(range(len(l1)), l1, '+', label='L_1')
    plot(range(len(l2)), l2, 'x', label='L_2')
    plot(range(len(linf)), linf, '2', label='L_inf',markersize=10)
    ax.set_yscale('log')
    ax.legend(prop={'size':10})
    ylabel('Residuo de norma (log)')
    xlabel('# de iteraciones')
    fig.tight_layout()
    ax.set_ylim([1e-5 - 5e-6,1.])
    ax.set_xlim([0, 50])



    fig.savefig('norma-convergencia.png')


notredame_convergencia()
stanford_convergencia()
google_convergencia()
dist_convergencia()
